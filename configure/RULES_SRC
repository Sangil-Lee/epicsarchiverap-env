#
.DEFAULT_GOAL := help

.PHONY: help default

# help is defined in
# https://gist.github.com/rcmachado/af3db315e31383502660
help:
	$(info --------------------------------------- )
	$(info Make Targets)
	$(info --------------------------------------- )
	$(QUIET) awk '/^[a-zA-Z\\-\\_0-9]+:/ {          \
	  nb = sub( /^## /, "", helpMsg );              \
	  if(nb == 0) {                                 \
	    helpMsg = $$0;                              \
	    nb = sub( /^[^:]*:.* ## /, "", helpMsg );   \
	  }                                             \
	  if (nb)                                       \
	    print  $$1 "\t" helpMsg;                    \
	}                                               \
	{ helpMsg = $$0 }'                              \
	$(MAKEFILE_LIST) | column -ts:

default: help

.PHONY: init clone update deinit distclean checkout srcupdate
## Clone and update Source
init: clone update pom

pom:
	$(QUIET)echo "-------------------------------------------------------------"
	$(QUIET)echo "Move env $(TOP)/pom.xml to $(SRC_PATH)"
	cp -rf $(TOP)/pom.xml $(SRC_PATH)
	$(QUIET)echo "-------------------------------------------------------------"

# gitclone use '-C' option, so git version should be more than 1.8.5. CentOS7 git is imcompatiable.
#
clone:
	$(call gitclone,$(SRC_GITURL),$(SRC_PATH),$(SRC_TAG))

update:
	$(QUIET)cd $(SRC_PATH) && git submodule update --init ./

checkout:
	$(QUIET)cd $(SRC_PATH) && git checkout $(SRC_TAG)

srcupdate: checkout update

deinit: distclean

## Clean
distclean:
	$(call distclean, $(SRC_PATH))

.PHONY: info.mvn clean.mvn build.mvn copy.sitespecific mkdir.wars

## Ant and Java
info.mvn:
	$(QUIET)echo "-------------------------------------------------------------"
	$(QUIET)echo ">>> MAVEN information"
	$(QUIET)echo "MAVEN : $(MAVEN_PATH)/mvn"
	$(QUIET)$(MAVEN_PATH)/mvn -version
	$(QUIET)echo "-------------------------------------------------------------"
	$(QUIET)echo ">>> JAVA information"
	$(QUIET)echo "JAVA : $(JAVA_PATH)/java"
	$(QUIET)$(JAVA_PATH)/java -version
	$(QUIET)echo "-------------------------------------------------------------"

## Clean
clean.mvn: info.mvn
	cd $(SRC_PATH) && ARCHAPPLSITE=als JAVA_HOME=$(JAVA_HOME) $(MAVEN_CMD) $(MAVEN_OPTS) clean && cd ..

## -f $(SRC_PATH)/pom.xml does not work, since we will have the
## java.io.FileNotFoundException: docs/api/mgmt_scriptables.txt
## issues. It requires the significant work to change the sources codes,
## So, I am good for cd && solution.
## 2025-06-03
## Build
build.mvn: info.mvn copy.sitespecific
	cd $(SRC_PATH) && ARCHAPPL_SITEID=als JAVA_HOME=$(JAVA_HOME) $(MAVEN_CMD) $(MAVEN_OPTS) clean package && cd ..

## Build 2
build.mvn2: info.mvn copy.sitespecific
	cd $(SRC_PATH) && ARCHAPPL_SITEID=als JAVA_HOME=$(JAVA_HOME) $(MAVEN_CMD) $(MAVEN_OPTS) package -Dsphinx.skip=true && cd ..

## Build 3
build.mvn3: info.mvn copy.sitespecific
	cd $(SRC_PATH) && ARCHAPPL_SITEID=als JAVA_HOME=$(JAVA_HOME) $(MAVEN_CMD) $(MAVEN_OPTS) package -Dsphinx.skip=true -X && cd ..

copy.sitespecific: | FORCE
	$(QUIET)echo "-------------------------------------------------------------"
	$(QUIET)echo ">>> We are copying the site specific source to  $(ARCHAPPL_SITEID_TARGET_PATH)"
	rm -rf $(ARCHAPPL_SITEID_TARGET_PATH)
	$(QUIET)cp -rf $(ARCHAPPL_SITEID_TEMPATE_PATH) $(ARCHAPPL_SITEID_TARGET_PATH)
	$(QUIET)echo "-------------------------------------------------------------"


.PHONY: conf build


## Conf and Build
build: conf build.mvn

## Configuration
conf: conf.archapplproperties conf.storage

